generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique()
  category    String
  images      String[]
  brand       String
  description String
  details     String
  stock       Int
  price       Float    @default(0)
  rating      Float    @default(0)
  numReviews  Int      @default(0) @map("num_reviews")
  isFeatured  Boolean  @default(false) @map("is_featured")
  banner      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  OrderItem OrderItem[]

  @@map("products")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("NO_NAME")
  email         String    @unique()
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?   @map("payment_method")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  Cart     Cart[]
  Order    Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Cart {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  sessionCartId String   @map("session_cart_id")
  items         Json[]   @default([]) @db.Json
  itemsPrice    Float    @default(0) @map("items_price")
  totalPrice    Float    @default(0) @map("total_price")
  shippingPrice Float    @default(0) @map("shipping_price")
  taxPrice      Float    @default(0) @map("tax_price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model Order {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  shippingAddress Json      @map("shipping_address") @db.Json
  paymentMethod   String    @map("payment_method")
  paymentResult   Json?     @map("payment_result") @db.Json
  itemsPrice      Float     @default(0) @map("items_price")
  shippingPrice   Float     @default(0) @map("shipping_price")
  taxPrice        Float     @default(0) @map("tax_price")
  totalPrice      Float     @default(0) @map("total_price")
  isPaid          Boolean   @default(false) @map("is_paid")
  paidAt          DateTime? @map("paid_at")
  isDelivered     Boolean   @default(false) @map("is_delivered")
  deliveredAt     DateTime? @map("delivered_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  OrderItem OrderItem[]

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  price     Float    @default(0)
  name      String
  slug      String
  image     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order   Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
}
